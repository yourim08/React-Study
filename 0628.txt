<< 1. useEffect란?
리엑트 컴포넌트가 화면에 나타났을 때 실행되는 함수
ex) 할일 목록을 서버에서 가져오고 싶을 때, API 호출 관리할 때

1) 렌더링
- 컴포넌트를 화면에 그리는 것.
_ 컴포넌트의 상태나 내용이 변경되면 자동으로 재 렌더링 됨

2) useEffect
- 내가 원할 때 side effect code를 실행하기 위해 사용함.
- side effect code는 useEffect 안의 코드를 말함.
- 의존성 배열로 실행 타이밍을 직접 정함. (마운트, 업데이트, 언마운트)

3) 쓰는 이유
- API를 하나 호출한다고 가정해보자.
- 만약 useEffect가 없다면, 렌더링 될 때마다 API를 호출하게 되어 성능 저하, 과부하를 일으킬 수 있음
- useEffect를 사용한다면(실행 타이밍을 마운트로 둔다고 가정), 첫 렌더링 시에만 API를 호출하고, 재 렌더링 되었을 때는 API를 호출하지 않음.
- 즉, useEffect는 side effect code를 컴포넌트의 생명 주기에 맞춰 효율적으로 실행시키기 위해 사용한다고 할 수 있다.

4) 기본 형식
useEffect(()=> {
    // API 요청
}, [언제 실행할 지]); // 의존성 배열


<< 2. 컴포넌트 생명주기
1) 나타난다 (mount)   --  useEffect(()=>{...}, [])   // 초기 API 세팅
2) 업데이트 (update)  --  useEffect(()=>{...}, [state])  // 상태나 props가 변경될 때
3) 사라진다 (unmount) --  useEffect(()=>{return()=>{...}}, []) // 타이머 끝났을 때, 컴포넌트 정리할 때

